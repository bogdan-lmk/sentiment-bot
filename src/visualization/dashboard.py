import sys
import os
import logging
import matplotlib
matplotlib.use('Agg')  # Set backend before importing pyplot
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Append project root to system path
sys.path.append('/Users/buyer7/Desktop/ai-santiment')
from src.visualization.charts import DataVisualizer

# Configure logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_data():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    :return: –ö–æ—Ä—Ç–µ–∂ —Å DataFrame sentiment, keywords –∏ trends
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        data_files = {
            'sentiment': 'data/processed/sentiment_analysis.csv',
            'keywords': 'data/processed/keywords.csv',
            'trends': 'data/processed/message_trends.csv'
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        for name, path in data_files.items():
            if not os.path.exists(path):
                st.error(f"–§–∞–π–ª {name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                return None, None, None
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ DataFrame
        sentiment_df = pd.read_csv(data_files['sentiment'])
        keywords_df = pd.read_csv(data_files['keywords'])
        trend_df = pd.read_csv(data_files['trends'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        for df, col_name in [(sentiment_df, 'date'), (trend_df, 'date')]:
            try:
                df[col_name] = pd.to_datetime(df[col_name])
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ {col_name}: {e}")
        
        return sentiment_df, keywords_df, trend_df
    
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def create_advanced_sentiment_chart(sentiment_df):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
    
    :param sentiment_df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        plt.figure(figsize=(12, 6))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        sentiment_col = 'sentiment' if 'sentiment' in sentiment_df.columns else 'category'
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        sentiment_count = sentiment_df[sentiment_col].value_counts()
        
        plt.subplot(121)
        sns.barplot(x=sentiment_count.index, y=sentiment_count.values, 
                   hue=sentiment_count.index, palette='viridis', legend=False)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', fontsize=12)
        plt.xlabel('–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', fontsize=10)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=10)
        plt.xticks(rotation=45)
        
        plt.subplot(122)
        plt.pie(sentiment_count.values, labels=sentiment_count.index, autopct='%1.1f%%', 
                colors=sns.color_palette('viridis'))
        plt.title('–î–æ–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π', fontsize=12)
        
        plt.tight_layout()
        return plt.gcf()
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None

def create_dashboard():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ Streamlit.
    """
    # Initialize session state
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="Telegram Chat Analysis", 
        page_icon=":chart_with_upwards_trend:", 
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title('ü§ñ Telegram Chat Analysis Dashboard')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    sentiment_df, keywords_df, trend_df = load_data()
    
    if sentiment_df is None or keywords_df is None or trend_df is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader('üìä Sentiment Distribution')
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        sentiment_fig = create_advanced_sentiment_chart(sentiment_df)
        if sentiment_fig:
            st.pyplot(sentiment_fig)
            plt.close(sentiment_fig)
    
    with col2:
        st.subheader('üîë Top Keywords')
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        top_keywords = keywords_df.head(10)
        st.dataframe(
            top_keywords[['keyword', 'count']].style.background_gradient(cmap='Blues'),
            use_container_width=True
        )
    
    # –°–µ–∫—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
    st.subheader('üìà Message Trends')
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
    time_scale = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Å—à—Ç–∞–±:", 
        ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ']
    )
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞
    time_map = {
        '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ': 'D',
        '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'W',
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'M'
    }
    
    trend_data = trend_df.set_index('date').resample(time_map[time_scale]).size()
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤
    plt.figure(figsize=(12, 4))
    trend_data.plot(kind='line', marker='o', linestyle='-', color='green')
    plt.title(f'–¢—Ä–µ–Ω–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π ({time_scale})', fontsize=12)
    plt.xlabel('–î–∞—Ç–∞', fontsize=10)
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', fontsize=10)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    st.pyplot(plt.gcf())
    plt.close()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    st.sidebar.header('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CSV
    with open('data/processed/sentiment_analysis.csv', 'rb') as file:
        st.sidebar.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Sentiment CSV",
            data=file,
            file_name="sentiment_analysis.csv",
            mime="text/csv"
        )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.sidebar.checkbox('üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'):
        try:
            raw_data = pd.read_csv('data/raw/messages.csv')
            st.subheader('–ü–µ—Ä–≤—ã–µ 20 —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
            st.dataframe(raw_data.head(20))
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == '__main__':
    try:
        import asyncio
        # Ensure we have a running event loop
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        create_dashboard()
    except Exception as e:
        logger.error(f"Dashboard error: {e}")
        st.error(f"Critical dashboard error: {e}")
