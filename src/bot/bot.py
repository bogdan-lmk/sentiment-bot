import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile

from config.telegram_config import TELEGRAM_BOT_TOKEN, TELEGRAM_REPORT_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str = TELEGRAM_BOT_TOKEN, chat_id: str = TELEGRAM_REPORT_CHAT_ID):
        self.bot = Bot(token=token)
        self.report_chat_id = chat_id
        self.dp = Dispatcher()
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.dp.message(CommandStart())(self.send_welcome)
        self.dp.callback_query(F.data == "get_pdf_report")(self.send_pdf_report)
        self.dp.callback_query(F.data == "get_text_report")(self.send_text_report)
        self.dp.callback_query(F.data == "get_chart")(self.send_chart)

    def get_report_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤."""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ PDF –æ—Ç—á—ë—Ç", callback_data="get_pdf_report")],
            [InlineKeyboardButton(text="üìú –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç", callback_data="get_text_report")],
            [InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫", callback_data="get_chart")]
        ])
        return keyboard

    async def send_welcome(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        try:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π üìä\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ç—á—ë—Ç:",
                reply_markup=self.get_report_buttons()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_pdf_report(self, callback: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ç—á—ë—Ç–∞."""
        pdf_path = "reports/llm_report.pdf"
        try:
            if not os.path.exists(pdf_path):
                await callback.message.answer("‚åõ PDF –æ—Ç—á—ë—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
                # Try generating report if not exists
                from src.reporting.pdf_reporter import PDFReporter
                reporter = PDFReporter()
                reporter.generate_report()
                
            if os.path.exists(pdf_path):
                await callback.message.answer_document(FSInputFile(pdf_path))
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á—ë—Ç.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç—á—ë—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç:",
                reply_markup=self.get_report_buttons()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –æ—Ç—á—ë—Ç–∞: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: " + str(e))
            await callback.answer()

    async def send_text_report(self, callback: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        text_report_path = "reports/ai_report.txt"
        try:
            if not os.path.exists(text_report_path):
                await callback.message.answer("‚åõ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
                # Try generating report if not exists
                from src.reporting.llm_reporter import LLMReporter
                reporter = LLMReporter()
                reporter.generate_report()
                
            if os.path.exists(text_report_path):
                with open(text_report_path, 'r') as f:
                    report_text = f.read()
                await callback.message.answer(report_text)
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç—á—ë—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç:",
                reply_markup=self.get_report_buttons()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: " + str(e))
            await callback.answer()

    async def send_chart(self, callback: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã."""
        chart_path = "data/processed/chart.png"
        try:
            if os.path.exists(chart_path):
                await callback.message.answer_photo(FSInputFile(chart_path))
                await callback.answer()
            else:
                await callback.message.answer("‚ùå –î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await callback.answer()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç—á—ë—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç:",
                reply_markup=self.get_report_buttons()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–≥—Ä–∞–º–º—ã.")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

async def create_and_run_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        bot_instance = TelegramBot()
        await bot_instance.start()
    except Exception as e:
        logger.error(f"Fatal error in bot: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(create_and_run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
